# ch2. 의미 있는 이름

이름 잘 짓는 간단한 규칙

## 1.의도를 분명하게 밝혀라

변수나 함수, 클래스 이름은 존재이유,수행기능, 사용방법같은 내용들이 들어가 있어야한다. 따로 주석이 필요하다면 이름이 이런 의도들을 분명히 드러내지 못했다는 말이다. 의도가 드러나는 이름을 사용하면 코드 이해와 변경이 쉬워져 시간을 절약할수있다. 코드의 단순성이 중요한 것이 아니라 함축성 즉 코드맥락이 코드 자체에 명시적으로 드러나는게 중요하다. 

```java
int d; //의도가 드러나지 않은 코드
int daysSinceCreation; //의도가 드러나는 코드
```

## 2.그릇된 정보를 피하라

그릇된 단서는 코드 의미를 흐린다. 널리 쓰이는 의미가 있는 단어를 다른 의미로 사용해도 안되고 비슷한 이름을 사용하는것도 주의가 필요하다. 유사한 개념은 유사한 표기법을 사용하는데 이것도 정보이다. 일관성이 떨어지는 표기법은 그릇된 정보다. 대부분 개발자는 이름만 보고 객체를 선택하는데 이름으로 그릇된 정보를 제공하는 예가 ㅣ과 O다. 그 이유는 소문자 L은 숫자1, 대문자O는 0과 헷갈리기 때문이다.

## 3.의미 있게 구분하라

컴파일러나 인터프리터만 통과하려는 생각으로 코드를  구현하는 프로그래머는 스스로 문제를 일으킨다. 컴파일러를 통과해도 연속된 숫자를 덧붙이거나(a1, a2..) 불용어(의미가 불 분명한 언어)를 추가하는 방식은 아무 정보를 제공하기 못해 적절하지못하다. 이름이 달라야 한다면 의미도 달라져야한다.읽는 사람이 차이를 알도록 이름을 지어야한다. 

## 4.발음하기 쉬운 이름을 사용하라

단어는 발음이 가능하고 사람의 뇌는 단어를 처리하는데 발달되어있다. 그래서 발음하기 쉬운 단어로된 이름을 선택해야한다.

```java
//발음하기 어려운 코드
class DtaRcrd102 {
	private Date genymdhms;
	private final String pszqint = "102";
};
//발음하기 쉬운 코드
class Customer{
	private Date generationTimestamp;
	private final String recordId = "102";
};
```

## 5.검색하기 쉬운 이름을 사용하라

문자 하나를 사용하는 이름과 상수는 쉽게 눈에 띄지 않는다. 이런 관점에서 긴 이름이 짧은 이름보다 좋다. 검색하기 쉬운 이름이 상수보다 좋다. 보통 간단한 메서드에서 로컬 변수만 한 문자를 사용한다. 이름 길이는 범위 크기에 비례해야한다. 변수나 상수를 코드 여러 곳에서 사용한다면 검색하기 쉬운 이름이 좋다. 

### 6.인코딩을 피하라

이름에 인코딩(암호화)할 정보는 아주 많다. 유형이나 범위정보까지 인코딩에 넣으면 해독하기 어려워진다. 인코딩한 이름은 거의 발음하기 어려우며 오타가 생기기 쉽다. 클래스와 함수는 접두어가 필요없을 정도로 작아야 마땅하다. 또 멤버변수를 다른 색상으로 표시하거나 눈에 띄게 보여주는 IDE를 사용해야 마땅하다. 접두어는 구닥다리 코드라는 징표다. 

인코딩이 필요한 경우 : 인터페이스 클래스와 구현 클래스 이름을 지을때 인터페이스 이름은 접두어를 안 붙이는게 좋다. 인터페이스 클래스와 구현클래스중 하나의 이름을 인코딩해야 한다면 구현클래스의이름을 하는게 좋다.

## 7. 자신의 기억력을 자랑하지 마라

변수이름을 자신이 아는 이름 즉 일반적으로 문제 영역이나 해법 영역에서 사용하지 않는 이름을 선택하는데 이는 바람직하지 못하다. 

문자 하나만 사용하는 변수 이름은 반복 횟수를 세는 변수는 i, j, k는 괜찮다. 단 루프 범위가 작고 다른 이름과 충돌하지 않을 때만 괜찮고 그 외에는 대부분 적절치 못하다.

전문가 프로그래머는 명료함이 최고라는 사실을 이해하고 자신의 능력을 좋은 방향으로 사용해 남들이 이해하는 코드를 내놓는다. 

-클래스이름, 객체이름: 명사나 명사구가 적합하고 Manager, Processor, Data, Info등 단어는 피하고 동사는 사용하지 않는다. 

-메서드 이름: 동사나 동사구가 적합하고 접근자, 변경자, 조건자는 javabean 표준에 따라 앞에 get, set,is 를 붙인다. 

```java
string name = employee.getName();
customer.setName("mike");
if(paycheck.isPosted())...
```

생성자를 중복정의할 때는 정적 팩토리 메서드를 사용한다. 메서드는 인수를 설명하는 이름을 사용한다. 

## 8.기발한 이름은 피하라

재미난 이름보다 명료한 이름을 택해야한다.특정 문화에서만 사용하는 농담은피하는게 좋고 의도를 분명하고 솔직하게 표현해야한다. 

## 9.한 개념에 한 단어를 사용하라

 추상적인 개념 하나에 단어 하나를 선택해 이를 고수한다. 현실에서는 이름을 기억하기 위해 라이브러리를 작성한 회사나 그룹이나 개인을 기억해야 하는 경우가 많다. 메서드 이름은 독자적이고 일관적이어야 주석을 뒤져보지 않고도 프로그래머가 올바른 메서드를 선택할수있다. 

## 10.말장난을 하지 마라

한 단어를 두 가지 목적으로 사용하면 안된다. 다른 개념에 같은 단어를 사용하는것은 말장난이다. 예를 들어 여러 클래스에 add라는 메서드가 생겼을때 메서드의 배개변수와 반환값이 의미적으로 똑같다면 괜찮지만 같은 맥락이 아닌데 일관성을 고려해 add라는 단어를 선택하면 말장난이다. 

프로그래머는 집중적인 탐구가 필요한 코드가 아니라 대충 훑어봐도 이해하기 쉬운 코드를 작성하는것이 목표다.

## 11.해법 영역에서 가져온 이름을 사용하라

코드를 읽을 사람도 프로그래머이기에 전산용어, 알고리즘 이름, 패턴이름, 수학용어등 사용해도 괜찮다. 모든 이름을 문제 영역에서 가져오는것은 현명하지 못하다. 기술 개념에는 기술 이름이 가장 적합한 선택이다. 

## 12.문제 영역에서 가져온 이름을 사용하라

적절한 프로그래머 용어가 없으면 문제 영역에서 이름을 가져온다. 해법영역과 문제영역을 구분할 줄 알아야 한다. 문제 영역 개념과 관련이 깊은 코드라면 문제 영역에서 이름을 가져와야 한다. 

## 13.의미있는 맥락을 추가하라

대다수의 이름은 스스로 의미가 분명하지 못함으로 클래스, 함수, 이름 공간에 넣어 맥락을 부여한고 모든 방법이 실패하면 마지막 수단으로 접두어를 붙인다. 맥락을 개선하면 함수를 쪼개기가 쉬원지므로 알고리즘도 더 명확해진다.

## 14.불필요한 맥락을 없애라

의미가 분명한 경우 일반적으로는 짧은 이름이 긴 이름보다 좋다. 이름에 불필요한 맥락을 추가하지 않도록 주의한다.

좋은 이름을 선택하려면 설명 능력이 뛰어나야 하고 문화적인 배경이 같아야함. 클래스 이름과 메서드 이름을 모두 암기하지 못하기 때문에 표나 자료구조 처럼 읽히는 코드를 짜는데 집중해야함. 이름을 바꾼다고 질책해도 코드를 개선하려는 노력을 중단해서는 안된다. 다른 사람이 짠 코드를 손본다면 리팩터링 도구를 사용해 문제 해결 목적으로 이름을 개선하라. 코드 가독성이 높아지고 장기적인 이익까지 보장한다.
